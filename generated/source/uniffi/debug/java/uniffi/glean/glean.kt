// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.glean;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicLong

// This is a helper for safely working with byte buffers returned from the Rust code.
// It's basically a wrapper around a length and a data pointer, corresponding to the
// `ffi_support::ByteBuffer` struct on the rust side.
//
// It's lightly modified from the version we use in application-services.

@Structure.FieldOrder("len", "data")
open class RustBuffer : Structure() {
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue

    companion object {
        internal fun alloc(size: Int) =
            _UniFFILib.INSTANCE.ffi_glean_bytebuffer_alloc(size)

        internal fun free(buf: RustBuffer.ByValue) =
            _UniFFILib.INSTANCE.ffi_glean_bytebuffer_free(buf)
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() = 
        this.data?.getByteBuffer(0, this.len)?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

// Helpers for reading primitive data types from a bytebuffer.

fun<T> liftFromRustBuffer(rbuf: RustBuffer.ByValue, readItem: (ByteBuffer) -> T): T {
    val buf = rbuf.asByteBuffer()!!
    try {
       val item = readItem(buf)
       if (buf.hasRemaining()) {
           throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
       }
       return item
    } finally {
        RustBuffer.free(rbuf)
    }
}

fun Boolean.Companion.lift(v: Byte): Boolean {
    return v.toInt() != 0
}

fun Boolean.Companion.read(buf: ByteBuffer): Boolean {
    return Boolean.lift(buf.get())
}

fun Byte.Companion.lift(v: Byte): Byte {
    return v
}

fun Byte.Companion.read(buf: ByteBuffer): Byte {
    return buf.get()
}

fun Short.Companion.lift(v: Short): Short {
    return v
}

fun Short.Companion.read(buf: ByteBuffer): Short {
    return buf.getShort()
}

fun Int.Companion.lift(v: Int): Int {
    return v
}

fun Int.Companion.read(buf: ByteBuffer): Int {
    return buf.getInt()
}

fun Long.Companion.lift(v: Long): Long {
    return v
}

fun Long.Companion.read(buf: ByteBuffer): Long {
    return buf.getLong()
}

// Unsigned types
fun UByte.Companion.lift(v: Byte): UByte {
    return v.toUByte()
}

fun UByte.Companion.read(buf: ByteBuffer): UByte {
    return UByte.lift(buf.get())
}

fun UShort.Companion.lift(v: Short): UShort {
    return v.toUShort()
}

fun UShort.Companion.read(buf: ByteBuffer): UShort {
    return UShort.lift(buf.getShort())
}

fun UInt.Companion.lift(v: Int): UInt {
    return v.toUInt()
}

fun UInt.Companion.read(buf: ByteBuffer): UInt {
    return UInt.lift(buf.getInt())
}

fun ULong.Companion.lift(v: Long): ULong {
    return v.toULong()
}

fun ULong.Companion.read(buf: ByteBuffer): ULong {
    return ULong.lift(buf.getLong())
}

fun Float.Companion.lift(v: Float): Float {
    return v
}

fun Float.Companion.read(buf: ByteBuffer): Float {
    return buf.getFloat()
}

fun Double.Companion.lift(v: Double): Double {
    return v
}

fun Double.Companion.read(buf: ByteBuffer): Double {
    val v = buf.getDouble()
    return v
}

// I can't figure out how to make a generic implementation of (Any?).read, and IIUC there are some
// restrictions on generics in Kotlin (inherited from the JVM) that make it impossible to write in the
// style I want here. So, we use a standalone helper.

fun<T> liftOptional(rbuf: RustBuffer.ByValue, readItem: (ByteBuffer) -> T): T? {
    return liftFromRustBuffer(rbuf) { buf -> readOptional(buf, readItem) }
}

fun<T> readOptional(buf: ByteBuffer, readItem: (ByteBuffer) -> T): T? {
    if (! Boolean.read(buf)) {
        return null
    }
    return readItem(buf)
}

fun<T> liftSequence(rbuf: RustBuffer.ByValue, readItem: (ByteBuffer) -> T): List<T> {
    return liftFromRustBuffer(rbuf) { buf -> readSequence(buf, readItem) }
}

fun<T> readSequence(buf: ByteBuffer, readItem: (ByteBuffer) -> T): List<T> {
    val len = Int.read(buf)
    return List<T>(len) {
        readItem(buf)
    }
}

fun<V> liftMap(rbuf: RustBuffer.ByValue, readItem: (ByteBuffer) -> Pair<String, V>): Map<String, V> {
    return liftFromRustBuffer(rbuf) { buf -> readMap(buf, readItem) }
}

fun<V> readMap(buf: ByteBuffer, readItem: (ByteBuffer) -> Pair<String, V>): Map<String, V> {
    val len = Int.read(buf)
    @OptIn(ExperimentalStdlibApi::class)
    return buildMap<String, V>(len) {
        repeat(len) {
            val (k, v) = readItem(buf)
            put(k, v)
        }
    }
}

// Helpers for lowering primitive data types into a bytebuffer.
// Since we need to allocate buffers from rust, the lowering process needs to be
// able to calculate ahead-of-time what the required size of the buffer will be.

fun<T> lowerIntoRustBuffer(v: T, calculateWriteSize: (T) -> Int, writeItem: (T, ByteBuffer) -> Unit): RustBuffer.ByValue {
    val buf = RustBuffer.alloc(calculateWriteSize(v))
    try {
        writeItem(v, buf.asByteBuffer()!!)
        return buf
    } catch (e: Throwable) {
        RustBuffer.free(buf)
        throw e
    }
}

fun Boolean.lower(): Byte {
    return if (this) 1.toByte() else 0.toByte()
}

fun Boolean.calculateWriteSize(): Int {
    return 1
}

fun Boolean.write(buf: ByteBuffer) {
    buf.put(this.lower())
}

fun Byte.lower(): Byte {
    return this
}

fun Byte.calculateWriteSize(): Int {
    return 1
}

fun Byte.write(buf: ByteBuffer) {
    buf.put(this)
}

fun Short.lower(): Short {
    return this
}

fun Short.calculateWriteSize(): Int {
    return 2
}

fun Short.write(buf: ByteBuffer) {
    buf.putShort(this)
}

fun Int.lower(): Int {
    return this
}

fun Int.calculateWriteSize(): Int {
    return 4
}

fun Int.write(buf: ByteBuffer) {
    buf.putInt(this)
}

fun Long.lower(): Long {
    return this
}

fun Long.calculateWriteSize(): Int {
    return 8
}

fun Long.write(buf: ByteBuffer) {
    buf.putLong(this)
}

// Experimental unsigned types
fun UByte.lower(): Byte {
    return this.toByte()
}

fun UByte.calculateWriteSize(): Int {
    return 1
}

fun UByte.write(buf: ByteBuffer) {
    buf.put(this.toByte())
}

fun UShort.lower(): Short {
    return this.toShort()
}

fun UShort.calculateWriteSize(): Int {
    return 2
}

fun UShort.write(buf: ByteBuffer) {
    buf.putShort(this.toShort())
}

fun UInt.lower(): Int {
    return this.toInt()
}

fun UInt.calculateWriteSize(): Int {
    return 4
}

fun UInt.write(buf: ByteBuffer) {
    buf.putInt(this.toInt())
}

fun ULong.lower(): Long {
    return this.toLong()
}

fun ULong.calculateWriteSize(): Int {
    return 8
}

fun ULong.write(buf: ByteBuffer) {
    buf.putLong(this.toLong())
}

fun Float.lower(): Float {
    return this
}

fun Float.calculateWriteSize(): Int {
    return 4
}

fun Float.write(buf: ByteBuffer) {
    buf.putFloat(this)
}

fun Double.lower(): Double {
    return this
}

fun Double.calculateWriteSize(): Int {
    return 8
}

fun Double.write(buf: ByteBuffer) {
    buf.putDouble(this)
}

fun String.lower(): Pointer {
    val rustErr = RustError.ByReference()
    val rustStr = _UniFFILib.INSTANCE.ffi_glean_string_alloc_from(this, rustErr)
    if (rustErr.code != 0) {
         throw RuntimeException("caught a panic while passing a string across the ffi")
    }
    return rustStr
}

fun String.write(buf: ByteBuffer) {
    val byteArr = this.toByteArray()
    buf.putInt(byteArr.size)
    buf.put(byteArr)
}

fun String.Companion.read(buf: ByteBuffer): String {
    val len = Int.read(buf)
    val byteArr = ByteArray(len)
    buf.get(byteArr)
    return byteArr.toString(Charsets.UTF_8)
}

fun String.calculateWriteSize(): Int {
    return 4 + this.toByteArray().size
}

fun String.Companion.lift(ptr: Pointer): String {
    try {
        return ptr.getString(0, "utf8")
    } finally {
        _UniFFILib.INSTANCE.ffi_glean_string_free(ptr)
    }
}

fun<T> lowerSequence(v: List<T>, calculateWriteSize: (T) -> Int, writeItem: (T, ByteBuffer) -> Unit): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v, { v -> calculateWriteSizeSequence(v, calculateWriteSize) }, { v, buf -> writeSequence(v, buf, writeItem) })
}

fun<T> calculateWriteSizeSequence(v: List<T>, calculateWriteSize: (T) -> Int): Int {
    var len = v.size.calculateWriteSize()
    v.forEach { len += calculateWriteSize(it) }
    return len
}

fun<T> writeSequence(v: List<T>, buf: ByteBuffer, writeItem: (T, ByteBuffer) -> Unit) {
    v.size.write(buf)
    v.forEach { writeItem(it, buf) }
}

fun<V> lowerMap(m: Map<String, V>, calculateWriteSize: (String, V) -> Int, writeEntry: (String, V, ByteBuffer) -> Unit): RustBuffer.ByValue {
    return lowerIntoRustBuffer(m, { m -> calculateWriteSizeMap(m, calculateWriteSize) }, { m, buf -> writeMap(m, buf, writeEntry) })
}

fun<V> calculateWriteSizeMap(v: Map<String, V>, calculateWriteSize: (String, V) -> Int): Int {
    var len = v.size.calculateWriteSize()
    v.forEach { k, v -> len += calculateWriteSize(k, v) }
    return len
}

fun<V> writeMap(v: Map<String, V>, buf: ByteBuffer, writeEntry: (String, V, ByteBuffer) -> Unit) {
    v.size.write(buf)
    v.forEach { k, v -> writeEntry(k, v, buf) }
}

fun<T> lowerOptional(v: T?, calculateWriteSize: (T) -> Int, writeItem: (T, ByteBuffer) -> Unit): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v, { v -> calculateWriteSizeOptional(v, calculateWriteSize) }, { v, buf -> writeOptional(v, buf, writeItem) })
}

fun<T> calculateWriteSizeOptional(v: T?, calculateWriteSize: (T) -> Int): Int {
    if (v === null) return 1
    return 1 + calculateWriteSize(v)
}

fun<T> writeOptional(v: T?, buf: ByteBuffer, writeItem: (T, ByteBuffer) -> Unit) {
    if (v === null) {
        buf.put(0)
    } else {
        buf.put(1)
        writeItem(v, buf)
    }
}

@Synchronized
fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.${componentName}.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_${componentName}"
}

inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal var INSTANCE: _UniFFILib = loadIndirect(componentName = "glean")
    }

    fun ffi_glean_BooleanMetric_object_free(handle: Long
    
    ): Unit

    fun glean_BooleanMetric_new(
     err: Structure.ByReference
    ): Long

    fun glean_BooleanMetric_glean_new_boolean_metric(handle: Long,category: Pointer,name: Pointer,send_in_pings: RustBuffer.ByValue,send_in_pings_len: Int,lifetime: Int,disabled: Byte
    , err: Structure.ByReference
    ): Long

    fun glean_BooleanMetric_glean_destroy_boolean_metric(handle: Long,metric_id: Long
    , err: Structure.ByReference
    ): Unit

    fun glean_BooleanMetric_glean_boolean_set(handle: Long,metric_id: Long,value: Byte
    , err: Structure.ByReference
    ): Unit

    fun glean_BooleanMetric_glean_boolean_test_has_value(handle: Long,metric_id: Long,storage_name: Pointer
    , err: Structure.ByReference
    ): Byte

    fun glean_BooleanMetric_glean_boolean_test_get_value(handle: Long,metric_id: Long,storage_name: Pointer
    , err: Structure.ByReference
    ): Byte

    fun ffi_glean_bytebuffer_alloc(size: Int
    
    ): RustBuffer.ByValue

    fun ffi_glean_bytebuffer_free(buf: RustBuffer.ByValue
    
    ): Unit

    fun ffi_glean_string_alloc_from(str: String
    , err: Structure.ByReference
    ): Pointer

    fun ffi_glean_string_free(str: Pointer
    
    ): Unit

    
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

abstract class FFIObject(
    private val handle: AtomicLong
) {
    open fun destroy() {
        this.handle.set(0L)
    }

    internal inline fun <R> callWithHandle(block: (handle: Long) -> R) =
        this.handle.get().let { handle -> 
            if (handle != 0L) {
                block(handle)
            } else {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
        }
}

inline fun <T : FFIObject, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            this.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// Public interface members begin here.
// Public facing enums

enum class Lifetime {
    
    PING,
    
    APPLICATION,
    
    USER;
    

    companion object {
        internal fun lift(n: Int) =
            try { values()[n - 1] }
            catch (e: IndexOutOfBoundsException) {
                throw RuntimeException("invalid enum value, something is very wrong!!", e)
            }

        internal fun read(buf: ByteBuffer) = lift(Int.read(buf))
    }

    internal fun lower() = this.ordinal + 1

    internal fun calculateWriteSize() = 4

    internal fun write(buf: ByteBuffer) = this.lower().write(buf)
}// Error definitions
interface RustErrorReference : Structure.ByReference {
    fun isFailure(): Boolean
    fun<E: Exception> intoException(): E
    fun ensureConsumed()
    fun getMessage(): String?
    fun consumeErrorMessage(): String
}

@Structure.FieldOrder("code", "message")
internal open class RustError : Structure() {
   open class ByReference: RustError(), RustErrorReference

    @JvmField var code: Int = 0
    @JvmField var message: Pointer? = null

    /**
     * Does this represent success?
     */
    fun isSuccess(): Boolean {
        return code == 0
    }

    /**
     * Does this represent failure?
     */
    fun isFailure(): Boolean {
        return code != 0
    }

    @Synchronized
    fun ensureConsumed() {
        if (this.message != null) {
            _UniFFILib.INSTANCE.ffi_glean_string_free(this.message!!)
            this.message = null
        }
    }

    /**
     * Get the error message or null if there is none.
     */
    fun getMessage(): String? {
        return this.message?.getString(0, "utf8")
    }

    /**
     * Get and consume the error message, or null if there is none.
     */
    @Synchronized
    fun consumeErrorMessage(): String {
        val result = this.getMessage()
        if (this.message != null) {
            this.ensureConsumed()
        }
        if (result == null) {
            throw NullPointerException("consumeErrorMessage called with null message!")
        }
        return result
    }

    @Suppress("ReturnCount", "TooGenericExceptionThrown")
    open fun<E: Exception> intoException(): E {
        if (!isFailure()) {
            // It's probably a bad idea to throw here! We're probably leaking something if this is
            // ever hit! (But we shouldn't ever hit it?)
            throw RuntimeException("[Bug] intoException called on non-failure!")
        }
        this.consumeErrorMessage()
        throw RuntimeException("Generic errors are not implemented yet")
    }
}

internal open class InternalError : RustError() {
    class ByReference: InternalError(), RustErrorReference

    @Suppress("ReturnCount", "TooGenericExceptionThrown", "UNCHECKED_CAST")
    override fun<E: Exception> intoException(): E {
        if (!isFailure()) {
            // It's probably a bad idea to throw here! We're probably leaking something if this is
            // ever hit! (But we shouldn't ever hit it?)
            throw RuntimeException("[Bug] intoException called on non-failure!")
        }
        val message = this.consumeErrorMessage()
        return InternalException(message) as E
    }
}

class InternalException(message: String) : Exception(message)

// Helpers for calling Rust with errors:
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
private inline fun <U, E: RustErrorReference> nullableRustCall(callback: (E) -> U?, err: E): U? {
    try {
        val ret = callback(err)
        if (err.isFailure()) {
            throw err.intoException()
        }
        return ret
    } finally {
        // This only matters if `callback` throws (or does a non-local return, which
        // we currently don't do)
        err.ensureConsumed()
    }
}

private inline fun <U, E: RustErrorReference> rustCall(err: E, callback: (E) -> U?): U {
    return nullableRustCall(callback, err)!!
}

// Public facing records

// Namespace functions


// Objects

class BooleanMetric(
    handle: Long
) : FFIObject(AtomicLong(handle)) {
    constructor() :
        this(rustCall(
    
    
    InternalError.ByReference()
    
) { err ->
    _UniFFILib.INSTANCE.glean_BooleanMetric_new(err)
})

    /**
     * Disconnect the object from the underlying Rust object.
     * 
     * It can be called more than once, but once called, interacting with the object 
     * causes an `IllegalStateException`.
     * 
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override fun destroy() {
        try {
            callWithHandle {
                super.destroy() // poison the handle so no-one else can use it before we tell rust.
                _UniFFILib.INSTANCE.ffi_glean_BooleanMetric_object_free(it)
            }
        } catch (e: IllegalStateException) {
            // The user called this more than once. Better than less than once.
        }
    }

    fun gleanNewBooleanMetric(category: String, name: String, sendInPings: List<String>, sendInPingsLen: Int, lifetime: Lifetime, disabled: UByte ): ULong =
        callWithHandle {
            
rustCall(
    
    
    InternalError.ByReference()
    
) { err ->
    _UniFFILib.INSTANCE.glean_BooleanMetric_glean_new_boolean_metric(it, category.lower(), name.lower(), lowerSequence(sendInPings, { v -> v.calculateWriteSize() }, { v, buf -> v.write(buf) }), sendInPingsLen.lower(), lifetime.lower(), disabled.lower() , err)
}
        }.let {
            ULong.lift(it)
        }
    
    fun gleanDestroyBooleanMetric(metricId: ULong ) =
        callWithHandle {
            
rustCall(
    
    
    InternalError.ByReference()
    
) { err ->
    _UniFFILib.INSTANCE.glean_BooleanMetric_glean_destroy_boolean_metric(it, metricId.lower() , err)
} 
        }
    
    fun gleanBooleanSet(metricId: ULong, value: UByte ) =
        callWithHandle {
            
rustCall(
    
    
    InternalError.ByReference()
    
) { err ->
    _UniFFILib.INSTANCE.glean_BooleanMetric_glean_boolean_set(it, metricId.lower(), value.lower() , err)
} 
        }
    
    fun gleanBooleanTestHasValue(metricId: ULong, storageName: String ): UByte =
        callWithHandle {
            
rustCall(
    
    
    InternalError.ByReference()
    
) { err ->
    _UniFFILib.INSTANCE.glean_BooleanMetric_glean_boolean_test_has_value(it, metricId.lower(), storageName.lower() , err)
}
        }.let {
            UByte.lift(it)
        }
    
    fun gleanBooleanTestGetValue(metricId: ULong, storageName: String ): UByte =
        callWithHandle {
            
rustCall(
    
    
    InternalError.ByReference()
    
) { err ->
    _UniFFILib.INSTANCE.glean_BooleanMetric_glean_boolean_test_get_value(it, metricId.lower(), storageName.lower() , err)
}
        }.let {
            UByte.lift(it)
        }
    
    
}


